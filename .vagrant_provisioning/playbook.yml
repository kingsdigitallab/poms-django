---
- hosts: all
  vars_files:
    - vars.yml
  gather_facts: false
  become: true

  tasks:
  - name: fix debian sudoers file
    become: yes
    lineinfile:
      path: /etc/sudoers
      backup: yes
      regexp: "^%sudo\\s+ALL=\\(ALL:ALL\\)\\s+ALL$"
      line: "%sudo   ALL=(ALL) NOPASSWD: ALL"
    tags:
      - system

  - name: apt | install https transport for apt
    apt:
      pkg: apt-transport-https
      state: installed
      update_cache: yes
    tags:
      -system

  - name: apt | install required system packages
    apt:
      pkg: '{{ item }}'
      state: installed
      update_cache: yes
    with_items: '{{ system_packages }}'
    tags:
      - system

  - name: Upgrade all packages to the latest version
    apt:
      upgrade: yes
    tags:
      - system

  - name: git-lfs | add git ppa
    become: yes
    command: add-apt-repository ppa:git-core/ppa
    tags:
      - system
      - git

  - name: git-lfs | download
    become: yes
    get_url:
      url: '{{ git.url }}'
      dest: /tmp
      mode: 0777
    tags:
      - system
      - git

  - name: git-lfs | setup
    become: yes
    command: /tmp/script.deb.sh
    tags:
      - system
      - git

  - name: git-lfs | install
    apt:
      pkg: git-lfs
      state: installed
      update_cache: yes
    tags:
      - system
      - git

  - name: zsh | clone oh-my-zsh repo
    git: repo={{ zsh.oh_my_zsh }} dest={{ user_home }}/.oh-my-zsh
    tags:
      - system

  - name: zsh | deploy .zshrc
    copy: src={{ zsh.zshrc }} dest={{ user_home }}/.zshrc owner=vagrant
    tags:
      - system

  - name: zsh | as default shell
    user: name=vagrant shell=/bin/zsh
    tags:
      - system
  
  - name: motd | clean existing
    become: yes
    shell: 'rm -rf /etc/update-motd.d/*'
    tags:
      - system

  - name: motd | deploy motd
    become: yes
    copy: src={{ motd.file }} dest=/etc/update-motd.d/00-kdl owner=root
    tags:
      - system

  - name: motd | permissions
    become: yes
    shell: 'chmod +x /etc/update-motd.d/*'
    tags:
      - system

- hosts: all
  vars_files:
    - vars.yml
  gather_facts: false
  tasks:
  - name: python | make python3 default version
    become: yes
    alternatives:
      link: /usr/bin/python
      name: python
      path: /usr/bin/python3
      priority: 10

  - name: pip | install virtualenv
    become: yes
    pip:
      name: virtualenv
      state: latest
    tags:
      - python

  - name: pip | setup virtualenv
    file: path={{ python.virtualenv_location }} state=directory
  - command: virtualenv {{ python.virtualenv_location }}
    tags:
      - python

  - name: pip | update setuptools
    pip:
      name: setuptools
      virtualenv: "{{ python.virtualenv_location }}"
      state: latest
    tags:
      - python

  - name: pip | update pip
    pip:
      name: pip
      virtualenv: "{{ python.virtualenv_location }}"
      state: latest
    tags:
      - python

  - name: pip | ensure python requirements are installed to latest version
    pip:
      requirements: "{{ project_root }}/{{ python.requirements }}"
      virtualenv: "{{ python.virtualenv_location }}"
    tags:
      - python

- hosts: all
  vars_files:
    - vars.yml
  # gather_facts: false 

  tasks:
  - name: mysql | create user
    mysql_user:
      login_user: "{{ mysql.admin_user }}"
      login_password: ""
      user: "{{ mysql.user }}"
      password: "{{ app.name }}"
      priv: "*.*:ALL"
    tags:
      - db

  - name: check if initial data file exists
    stat:
      path: "{{ project_root }}/.vagrant_provisioning/{{ mysql.initial_data_file }}"
    register: idf
    tags:
      - db
      - data

  - name: mysql | create db
    when: idf.stat.exists
    mysql_db:
      name: "{{ app.name }}"
      encoding: "{{mysql.encoding}}"
      login_user: "{{ mysql.admin_user }}"
      login_password: ""

    tags:
      - db

  - name: mysql | load initial data file
    mysql_db: login_user={{ mysql.admin_user }} login_password= state=import encoding={{mysql.encoding}}  name={{ app.name }} target={{ project_root }}/.vagrant_provisioning/{{ mysql.initial_data_file }}
    tags:
      - db
      - data


- hosts: all
  vars_files:
    - vars.yml
  

  tasks:
  - name: solr | download
    become: yes
    get_url:
      url: '{{ solr.url }}'
      dest: /tmp
    tags:
      - system
      - solr

  - name: solr | unarchive
    become: yes
    unarchive:
      src: /tmp/solr-{{ solr.version}}.tgz
      dest: /tmp
      remote_src: yes
    tags:
      - system
      - solr


  - name: solr | install
    become: yes
    command: /tmp/solr-{{ solr.version }}/bin/install_solr_service.sh /tmp/solr-{{ solr.version}}.tgz -f
    tags:
      - system
      - solr

  - name: solr | set up
    become: yes
    become_user: solr
    command: /opt/solr/bin/solr create -c dev
    # ignoring errors because this fails if the core already exists
    ignore_errors: yes
    notify: solr | restart solr
    tags:
      - system
      - solr

  handlers:
  - name: solr | restart solr
    become: yes
    service:
      name: solr
      state: started
    tags:
      - db


- hosts: all
  vars_files:
    - vars.yml
  tasks:
  - name: django | default local settings
    copy: src=local_settings.py dest={{ project_root }}/{{ app.name }}/settings/local.py owner=vagrant
    tags:
      - django

  - name: django | migrations
    command: "{{ user_home }}/venv/bin/python {{ project_root }}/manage.py makemigrations"
  - command: "{{ user_home }}/venv/bin/python {{ project_root }}/manage.py migrate"
    tags:
      - django

  - name: django | add default (vagrant/vagrant) superuser
    command: "{{ user_home }}/venv/bin/python {{ project_root }}/manage.py shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('vagrant', 'vagrant@localhost', 'vagrant')\""
    ignore_errors: yes # The user may already exist
    tags:
      - django

- hosts: all
  vars_files:
      - vars.yml
  tasks:
  - name: git | init
    command: "git init"
    args:
      chdir: "{{ project_root }}"
    tags:
      - git

  - name: git | flake8 pre-commit hook
    command: "{{ user_home }}/venv/bin/flake8 --install-hook=git"
    ignore_errors: yes # Stop errors if it already exists
    args:
      chdir: "{{ project_root }}"
  - command: "git config flake8.strict True"
    args:
      chdir: "{{ project_root }}"
    tags:
      - git
