# -*- coding: utf-8 -*-
# Generated by Django 1.11.11 on 2018-04-17 13:49
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import pomsapp.models_authlists
import utils.modelextra.myfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AssocFactoidPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('nameoriglang', models.CharField(blank=True, max_length=765, null=True, verbose_name='nameoriglang')),
                ('nametranslation', models.CharField(blank=True, max_length=765, null=True, verbose_name='nametranslation')),
                ('standardmedievalform', models.CharField(blank=True, max_length=765, null=True, verbose_name='standardmedievalform')),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
            ],
            options={
                'ordering': ['orderno'],
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_alms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_lands',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_objects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_office',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_pgeneral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_revenuekind',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_revenuesilver',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPoss_unfreep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidPrivileges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('originaltext', models.CharField(blank=True, max_length=765, null=True, verbose_name='original text')),
                ('helper_inferred', models.BooleanField(default=False, verbose_name='Is True if a possession association has been inferred (for the FB)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidProanima',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('nameoriglang', models.CharField(blank=True, max_length=765, null=True, verbose_name='nameoriglang')),
                ('nametranslation', models.CharField(blank=True, max_length=765, null=True, verbose_name='nametranslation')),
                ('standardmedievalform', models.CharField(blank=True, max_length=765, null=True, verbose_name='standardmedievalform')),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
            ],
            options={
                'ordering': ['orderno'],
            },
        ),
        migrations.CreateModel(
            name='AssocFactoidWitness',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('nameoriglang', models.CharField(blank=True, max_length=765, null=True, verbose_name='nameoriglang')),
                ('nametranslation', models.CharField(blank=True, max_length=765, null=True, verbose_name='nametranslation')),
                ('standardmedievalform', models.CharField(blank=True, max_length=765, null=True, verbose_name='standardmedievalform')),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
            ],
            options={
                'ordering': ['orderno'],
            },
        ),
        migrations.CreateModel(
            name='AssocHelperPerson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='Do not modify. The time this record was firstly created.', verbose_name='created')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, editable=False, help_text='No need to edit: automatically updated each time the record is saved.', verbose_name='modified')),
                ('nameoriglang', models.CharField(blank=True, max_length=765, null=True, verbose_name='nameoriglang')),
                ('nametranslation', models.CharField(blank=True, max_length=765, null=True, verbose_name='nametranslation')),
                ('standardmedievalform', models.CharField(blank=True, max_length=765, null=True, verbose_name='standardmedievalform')),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='Order number')),
                ('helper_oldid', models.IntegerField(verbose_name='the id of the original association')),
                ('helper_type', models.CharField(max_length=30, verbose_name='text representation of the assoc type of the original')),
            ],
            options={
                'ordering': ['orderno'],
            },
        ),
        migrations.CreateModel(
            name='AttachmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_attachmenttype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_attachmenttype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Attachment Type',
            },
        ),
        migrations.CreateModel(
            name='Chartertype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_chartertype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_chartertype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'charter types',
            },
        ),
        migrations.CreateModel(
            name='CommonBurdens',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_commonburdens', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_commonburdens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Common Burdens',
            },
        ),
        migrations.CreateModel(
            name='DocTickboxes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_doctickboxes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_doctickboxes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'DocTickboxes',
            },
        ),
        migrations.CreateModel(
            name='Exemptiontype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_exemptiontype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_exemptiontype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'exemption type',
            },
        ),
        migrations.CreateModel(
            name='Factoid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('inferred_type', models.CharField(blank=True, max_length=100, null=True, verbose_name='inferred type')),
                ('shortdesc', models.CharField(blank=True, max_length=765, null=True, verbose_name='short description')),
                ('has_firmdate', models.BooleanField(default=False, verbose_name='Has firm date')),
                ('has_firmdayonly', models.BooleanField(default=False, verbose_name='DAY only firmdate')),
                ('firmdate', models.CharField(blank=True, help_text='Field automatically composed from the fields above. Please do not modify it directly, but instead modify the from/to options above.', max_length=765, null=True, verbose_name='Firm date [preview]')),
                ('undated', models.BooleanField(default=False, verbose_name='undated')),
                ('eitheror', models.BooleanField(default=False, verbose_name='either/or')),
                ('from_modifier', models.CharField(blank=True, choices=[('cir', 'circa'), ('by', 'by'), ('bef', 'before'), ('aft', 'after')], help_text='modifier', max_length=3, verbose_name='date of factoid  - FROM')),
                ('from_weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], help_text='weekday', max_length=2, null=True, verbose_name='')),
                ('from_day', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], help_text='day', null=True, verbose_name='')),
                ('from_modifier2', models.CharField(blank=True, choices=[('mid', 'mid'), ('ear', 'early'), ('lat', 'late')], help_text='modifier2', max_length=3, verbose_name='')),
                ('from_month', models.IntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='month', null=True, verbose_name='')),
                ('from_season', models.IntegerField(blank=True, choices=[(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')], help_text='season', max_length=2, null=True, verbose_name='')),
                ('from_year', models.IntegerField(blank=True, help_text='enter a year in numbers', null=True, verbose_name='')),
                ('to_modifier', models.CharField(blank=True, choices=[('cir', 'circa'), ('by', 'by'), ('bef', 'before'), ('aft', 'after')], help_text='modifier', max_length=3, verbose_name='date of factoid  - TO')),
                ('to_weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], help_text='weekday', max_length=2, null=True, verbose_name='')),
                ('to_day', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], help_text='day', max_length=2, null=True, verbose_name='')),
                ('to_modifier2', models.CharField(blank=True, choices=[('mid', 'mid'), ('ear', 'early'), ('lat', 'late')], help_text='modifier2', max_length=3, verbose_name='')),
                ('to_month', models.IntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='month', max_length=2, null=True, verbose_name='')),
                ('to_season', models.IntegerField(blank=True, choices=[(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')], help_text='season', max_length=2, null=True, verbose_name='')),
                ('to_year', models.IntegerField(blank=True, help_text='enter a year in numbers', null=True, verbose_name='')),
                ('probabledate', models.CharField(blank=True, max_length=765, null=True, verbose_name='probable date')),
                ('datingnotes', models.TextField(blank=True, null=True, verbose_name='dating notes')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('problems', models.TextField(blank=True, null=True, verbose_name='problems')),
                ('sourceref', models.CharField(blank=True, max_length=300, null=True, verbose_name='source reference (unused for now)')),
                ('helper_floruits', models.BooleanField(default=True, help_text='DISABLED: please re-save persons individually in order to update their floruits (or ask the db administrator to do that for you as a batch operation)', verbose_name='Calculate floruits automatically (warning: saving time can take longer)')),
                ('helper_keywordsearch', models.CharField(blank=True, max_length=765, null=True, verbose_name='Field for the keyword search')),
                ('helper_daterange', models.CharField(blank=True, max_length=100, null=True, verbose_name='helper field for date ranges - automatically generated so to accommodate a fixed date-range search facet (todo: supersede via a proper extension of the faceted browser)')),
            ],
            options={
                'ordering': ('from_year', 'from_month', 'from_day', 'to_year'),
            },
        ),
        migrations.CreateModel(
            name='Floruit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('eml', models.CharField(blank=True, max_length=30, null=True, verbose_name='modifier')),
                ('century', models.CharField(blank=True, max_length=60, null=True, verbose_name='century')),
                ('startyear', models.IntegerField(blank=True, null=True, verbose_name='start year')),
                ('endyear', models.IntegerField(blank=True, null=True, verbose_name='end year')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_floruit', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_floruit', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'floruit',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_gender', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_gender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'gender',
            },
        ),
        migrations.CreateModel(
            name='GrantorCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_grantorcategory', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_grantorcategory', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Grantor Categories',
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_language', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_language', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Languages',
            },
        ),
        migrations.CreateModel(
            name='LegalPertinents',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_legalpertinents', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_legalpertinents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Legal Pertinents',
            },
        ),
        migrations.CreateModel(
            name='MatrixShape',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_matrixshape', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_matrixshape', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Matrix Shape',
            },
        ),
        migrations.CreateModel(
            name='MedievalGaelicForename',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('audiofile', models.FileField(blank=True, help_text="upload a file in WAV or MP3 format [beta-stage functionality, can't remove a saved file  for the moment but just overwrite it]", upload_to=pomsapp.models_authlists.medieval_audio_file_name, verbose_name='audio recording')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_medievalgaelicforename', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_medievalgaelicforename', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Medieval Gaelic Forenames',
            },
        ),
        migrations.CreateModel(
            name='ModernGaelicForename',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('audiofile', models.FileField(blank=True, help_text="upload a file in WAV or MP3 format [beta-stage functionality, can't remove a saved file  for the moment but just overwrite it]", upload_to=pomsapp.models_authlists.modern_audio_file_name, verbose_name='audio recording')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_moderngaelicforename', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_moderngaelicforename', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Modern Gaelic Forenames',
            },
        ),
        migrations.CreateModel(
            name='Nominalrendertype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_nominalrendertype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_nominalrendertype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'nominal render type',
            },
        ),
        migrations.CreateModel(
            name='Occupationtype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_occupationtype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_occupationtype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'occupation type',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('persondisplayname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Surface name')),
                ('standardmedievalname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Medieval gaelic name')),
                ('moderngaelicname', models.CharField(blank=True, max_length=255, null=True, verbose_name='Modern gaelic name')),
                ('persondescription', models.TextField(blank=True, null=True, verbose_name='biography')),
                ('floruitstartpre', models.CharField(blank=True, max_length=50, null=True, verbose_name='pre-modifier')),
                ('floruitstartyr', models.IntegerField(blank=True, null=True, verbose_name='from year')),
                ('floruitstartpost', models.CharField(blank=True, max_length=50, null=True, verbose_name='post-modifier')),
                ('floruitendpre', models.CharField(blank=True, max_length=50, null=True, verbose_name='pre-modifier')),
                ('floruitendyr', models.IntegerField(blank=True, null=True, verbose_name='to year')),
                ('floruitendpost', models.CharField(blank=True, max_length=50, null=True, verbose_name='post-modifier')),
                ('forename', models.CharField(blank=True, max_length=765, null=True, verbose_name='Forename')),
                ('surname', models.CharField(blank=True, max_length=765, null=True, verbose_name='Surname')),
                ('sonof', models.CharField(blank=True, max_length=765, null=True, verbose_name='SonOf')),
                ('patronym', models.CharField(blank=True, max_length=765, null=True, verbose_name='Patronym')),
                ('ofstring', models.CharField(blank=True, max_length=765, null=True, verbose_name='ofString')),
                ('placeandinst', models.CharField(blank=True, max_length=765, null=True, verbose_name='Place/ institutional')),
                ('datestring', models.CharField(blank=True, max_length=765, null=True, verbose_name='Dates')),
                ('searchsurname', models.CharField(blank=True, max_length=765, null=True, verbose_name='Normalized field including surnames stripped of non-interesting particles, for searching purposes only')),
                ('moderngaelicsurname', models.CharField(blank=True, max_length=100, verbose_name='modern gaelic surname')),
                ('medievalgaelicsurname', models.CharField(blank=True, max_length=100, verbose_name='medieval gaelic surname')),
                ('helper_floruits', models.BooleanField(default=True, help_text='Using all primary transactions where person has role: Grantor, Beneficiary, Addressor, Addressee, Party 1, Party 2, Party 3, Consentor, Dated by hand of, Inspector, Scribe, Sealer, Signatory, Witness', verbose_name='Calculate floruits automatically (warning: saving time can take longer)')),
                ('helper_merge', models.BooleanField(default=False, help_text='Tick to indicate that other person-records will have to be merged into this record, and not otherwise', verbose_name="Keep as main record in 'merge' operation")),
                ('helper_bigsurname', models.CharField(blank=True, max_length=765, null=True, verbose_name='Field that displays a combination surname, sonOf, Patronym, ofString, Place-inst, for the FB only')),
                ('helper_searchbigsur', models.CharField(blank=True, max_length=765, null=True, verbose_name='Same as field above, but normalized')),
                ('helper_keywordsearch', models.CharField(blank=True, max_length=765, null=True, verbose_name='Field for the keyword search')),
                ('helper_totfactoids', models.IntegerField(blank=True, null=True, verbose_name="Field that speeds up searches of people by tot number of factoids associated to them. MIND that it's not updated automatically, you need to manually run fixture 8 instead!")),
                ('helper_daterange', models.CharField(blank=True, max_length=100, null=True, verbose_name='helper field for date ranges - automatically generated so to accommodate a fixed date-range search facet (todo: supersede via a proper extension of the faceted browser)')),
                ('has_family', models.NullBooleanField()),
                ('has_grantor', models.NullBooleanField()),
                ('ponelink', models.URLField(blank=True, verbose_name='Link to PoNE')),
                ('ponelink_sureness', models.CharField(blank=True, choices=[('con', 'confident'), ('pro', 'probably'), ('unl', 'unlikely'), ('fam', 'from the same family')], default='pro', max_length=3, verbose_name='Degree of certainty')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_person', to=settings.AUTH_USER_MODEL)),
                ('florhikey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flor_hiKey', to='pomsapp.Floruit', verbose_name='TO  :: century')),
                ('florlowkey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='flor_lowKey', to='pomsapp.Floruit', verbose_name='FROM  :: century')),
                ('genderkey', models.ForeignKey(blank=True, default=3, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Gender', verbose_name='Gender')),
            ],
            options={
                'ordering': ['persondisplayname'],
            },
        ),
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(blank=True, max_length=765, null=True, verbose_name='name')),
                ('genericname', models.CharField(blank=True, max_length=765, null=True, verbose_name='generic name')),
                ('articletext', models.CharField(blank=True, max_length=765, null=True, verbose_name='article text')),
                ('specificname', models.CharField(blank=True, max_length=765, null=True, verbose_name='specific name')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('util_topancestor', models.CharField(blank=True, max_length=765, null=True, verbose_name='root ancestor - utility field')),
                ('helper_name', models.CharField(blank=True, max_length=765, null=True, verbose_name='helper name used for diplay purposes')),
                ('helper_keywordsearch', models.TextField(blank=True, null=True, verbose_name='Field for the keyword search')),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326)),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_place', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Place', verbose_name='parent place')),
            ],
            options={
                'ordering': ['tree_id', 'lft', 'name'],
                'verbose_name_plural': 'Places',
            },
        ),
        migrations.CreateModel(
            name='PlaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('description', models.CharField(max_length=50)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_placetype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_placetype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['description'],
            },
        ),
        migrations.CreateModel(
            name='PossessionNew',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(blank=True, max_length=765, null=True, verbose_name='name')),
                ('nameextension', models.CharField(blank=True, max_length=765, null=True, verbose_name='name extension')),
                ('extraid', models.IntegerField(blank=True, null=True, verbose_name='useful unused field')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('util_topancestor', models.CharField(blank=True, max_length=765, null=True, verbose_name='root ancestor - utility field')),
                ('helper_name', models.CharField(blank=True, max_length=765, null=True, verbose_name='helper name used for diplay purposes')),
            ],
            options={
                'verbose_name_plural': 'Possessions',
            },
        ),
        migrations.CreateModel(
            name='Privileges',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(blank=True, max_length=765, null=True, verbose_name='name')),
                ('nameextension', models.CharField(blank=True, max_length=765, null=True, verbose_name='name extension')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('extraid', models.IntegerField(blank=True, null=True, verbose_name='useful unused field')),
                ('util_topancestor', models.CharField(blank=True, max_length=765, null=True, verbose_name='root ancestor - utility field')),
                ('helper_name', models.CharField(blank=True, max_length=765, null=True, verbose_name='helper name used for diplay purposes')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_privileges', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Privileges', verbose_name='parent')),
                ('place', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='related place (not used)')),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_privileges', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['tree_id', 'lft', 'name'],
                'verbose_name_plural': 'Privileges',
            },
        ),
        migrations.CreateModel(
            name='Proanimagenerictypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='order')),
                ('newline', models.IntegerField(blank=True, null=True, verbose_name='newline')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_proanimagenerictypes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_proanimagenerictypes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'proanima generic types (= Spiritual Benefits)',
                'verbose_name_plural': 'proanima generic types (= Spiritual Benefits)',
            },
        ),
        migrations.CreateModel(
            name='Referencetype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_referencetype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_referencetype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'reference type',
            },
        ),
        migrations.CreateModel(
            name='Relationshipmetatype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_relationshipmetatype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_relationshipmetatype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'relationship type',
            },
        ),
        migrations.CreateModel(
            name='Relationshiptype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_relationshiptype', to=settings.AUTH_USER_MODEL)),
                ('metatype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Relationshipmetatype', verbose_name='relation type')),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_relationshiptype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name': 'relationship',
                'verbose_name_plural': 'relationship',
            },
        ),
        migrations.CreateModel(
            name='Renderdate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_renderdate', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_renderdate', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'render date',
            },
        ),
        migrations.CreateModel(
            name='Returns_military',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_returns_military', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_returns_military', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Returns military',
            },
        ),
        migrations.CreateModel(
            name='Returns_renders',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_returns_renders', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_returns_renders', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Returns renders',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('spiritualbenefit', models.BooleanField(default=False, verbose_name='spiritual benefits')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_role', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_role', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='SealColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_sealcolor', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_sealcolor', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'Seal Color',
            },
        ),
        migrations.CreateModel(
            name='Sicutclausetype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('orderno', models.IntegerField(blank=True, null=True, verbose_name='order')),
                ('newline', models.IntegerField(blank=True, null=True, verbose_name='newline')),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_sicutclausetype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_sicutclausetype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'sicut clause type',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('source_tradid', models.CharField(blank=True, max_length=765, null=True, verbose_name='Trad. ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='description')),
                ('sourcefordataentry', models.TextField(blank=True, null=True, verbose_name='source for data entry')),
                ('hammondnumber', models.IntegerField(blank=True, null=True, verbose_name='calendar number #1')),
                ('hammondnumb2', models.IntegerField(blank=True, null=True, verbose_name='#2')),
                ('hammondnumb3', models.IntegerField(blank=True, null=True, verbose_name='#3')),
                ('hammondext', models.CharField(blank=True, max_length=300, null=True, verbose_name='ext.')),
                ('mofa_flag', models.NullBooleanField()),
                ('notes', models.TextField(blank=True, null=True, verbose_name='notes')),
                ('firmdate', models.CharField(blank=True, help_text='Field automatically composed from the fields above. Please do not modify it directly, but instead modify the from/to options above.', max_length=765, null=True, verbose_name='Firm date [preview]')),
                ('has_firmdate', models.BooleanField(default=False, verbose_name='Has firm date')),
                ('has_firmdayonly', models.BooleanField(default=False, verbose_name='DAY only firmdate')),
                ('undated', models.BooleanField(default=False, verbose_name='undated')),
                ('eitheror', models.BooleanField(default=False, verbose_name='either/or')),
                ('from_modifier', models.CharField(blank=True, choices=[('cir', 'circa'), ('by', 'by'), ('bef', 'before'), ('aft', 'after')], help_text='modifier', max_length=3, verbose_name='date of charter  - FROM')),
                ('from_weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], help_text='weekday', max_length=2, null=True, verbose_name='')),
                ('from_day', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], help_text='day', null=True, verbose_name='')),
                ('from_modifier2', models.CharField(blank=True, choices=[('mid', 'mid'), ('ear', 'early'), ('lat', 'late')], help_text='modifier2', max_length=3, verbose_name='')),
                ('from_month', models.IntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='month', null=True, verbose_name='')),
                ('from_season', models.IntegerField(blank=True, choices=[(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')], help_text='season', max_length=2, null=True, verbose_name='')),
                ('from_year', models.IntegerField(blank=True, help_text='enter a year in numbers', null=True, verbose_name='')),
                ('to_modifier', models.CharField(blank=True, choices=[('cir', 'circa'), ('by', 'by'), ('bef', 'before'), ('aft', 'after')], help_text='modifier', max_length=3, verbose_name='date of charter  - TO')),
                ('to_weekday', models.IntegerField(blank=True, choices=[(1, 'Monday'), (2, 'Tuesday'), (3, 'Wednesday'), (4, 'Thursday'), (5, 'Friday'), (6, 'Saturday'), (7, 'Sunday')], help_text='weekday', max_length=2, null=True, verbose_name='')),
                ('to_day', models.IntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31)], help_text='day', max_length=2, null=True, verbose_name='')),
                ('to_modifier2', models.CharField(blank=True, choices=[('mid', 'mid'), ('ear', 'early'), ('lat', 'late')], help_text='modifier2', max_length=3, verbose_name='')),
                ('to_month', models.IntegerField(blank=True, choices=[(1, 'January'), (2, 'February'), (3, 'March'), (4, 'April'), (5, 'May'), (6, 'June'), (7, 'July'), (8, 'August'), (9, 'September'), (10, 'October'), (11, 'November'), (12, 'December')], help_text='month', max_length=2, null=True, verbose_name='')),
                ('to_season', models.IntegerField(blank=True, choices=[(1, 'Spring'), (2, 'Summer'), (3, 'Autumn'), (4, 'Winter')], help_text='season', max_length=2, null=True, verbose_name='')),
                ('to_year', models.IntegerField(blank=True, help_text='enter a year in numbers', null=True, verbose_name='')),
                ('probabledate', models.CharField(blank=True, max_length=765, null=True, verbose_name='prob date')),
                ('datingnotes', models.TextField(blank=True, null=True, verbose_name='dating notes')),
                ('helper_hammond', models.CharField(blank=True, max_length=50, null=True, verbose_name='We store here the results of get_hammondnumber(), for faster ordering')),
                ('helper_keywordsearch', models.TextField(blank=True, null=True, verbose_name='Field for the keyword search')),
                ('helper_daterange', models.CharField(blank=True, max_length=100, null=True, verbose_name='helper field for date ranges - automatically generated so to accommodate a fixed date-range search facet (todo: supersede via a proper extension of the faceted browser)')),
                ('helper_totfactoids', models.IntegerField(blank=True, null=True, verbose_name="Field that speeds up searches of sources by tot number of factoids associated to them. MIND that it's not updated automatically, you need to manually run fixture 8 instead!")),
            ],
        ),
        migrations.CreateModel(
            name='Tenendasclauseoptions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_tenendasclauseoptions', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_tenendasclauseoptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'tenendas clause options',
            },
        ),
        migrations.CreateModel(
            name='TitleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_titletype', to=settings.AUTH_USER_MODEL)),
                ('placefk', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='Place related')),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_titletype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'titles',
            },
        ),
        migrations.CreateModel(
            name='Transactiontype',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_transactiontype', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_transactiontype', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'transaction type',
            },
        ),
        migrations.CreateModel(
            name='TransTickboxes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', utils.modelextra.myfields.CreationDateTimeField(blank=True, default=datetime.datetime.now, help_text='The time this record was firstly created. Do not modify.', verbose_name='created on date')),
                ('updated_at', utils.modelextra.myfields.ModificationDateTimeField(blank=True, default=datetime.datetime.now, help_text='Automatically updated each time the record is saved.', verbose_name='modified on date')),
                ('editedrecord', models.BooleanField(default=False, help_text='Tick to indicate that this record has been finalized', verbose_name='edited record?')),
                ('review', models.BooleanField(default=False, help_text='Tick to indicate that this record is under review by the editorial team', verbose_name='review')),
                ('internal_notes', models.TextField(blank=True, verbose_name='internal_notes')),
                ('name', models.CharField(max_length=765)),
                ('description', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_transtickboxes', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_transtickboxes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
                'verbose_name_plural': 'TransTickboxes',
            },
        ),
        migrations.CreateModel(
            name='Charter',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Source')),
                ('ischirograph', models.BooleanField(default=False, verbose_name='Chirograph?')),
                ('doctypenotes', models.TextField(blank=True, verbose_name='Doc type notes')),
                ('placedatemodern', models.CharField(blank=True, max_length=765, null=True, verbose_name='Place (modern)')),
                ('placedatedoc', models.CharField(blank=True, max_length=765, null=True, verbose_name='Place (document)')),
                ('letterpatent', models.BooleanField(default=False, verbose_name='referred to as letter patent')),
                ('origcontemp', models.BooleanField(default=False, verbose_name='Original (contemporary)')),
                ('duporigcontemp', models.BooleanField(default=False, verbose_name='Duplicate Original (contemporary)')),
                ('orignoncontemp', models.BooleanField(default=False, verbose_name='Original (non-contemporary)')),
                ('duporignoncontemp', models.BooleanField(default=False, verbose_name='Duplicate Original (non-contemporary)')),
                ('helper_hnumber', models.CharField(blank=True, help_text='A helper field that conflates al the hNumbers, for better alpha searching', max_length=100, null=True, verbose_name='h-number')),
                ('helper_copydates', models.BooleanField(default=True, help_text='(excluding non-primary transactions)', verbose_name='Copy dates to related Factoids?')),
                ('chartertypekey', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Chartertype', verbose_name='document type')),
                ('helper_tickboxes', models.ManyToManyField(blank=True, help_text='Helper field used for the faceted search - see actionsmodels', null=True, to='pomsapp.DocTickboxes', verbose_name='normalization of tickboxes')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
            },
            bases=('pomsapp.source',),
        ),
        migrations.CreateModel(
            name='FactPossession',
            fields=[
                ('factoid_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Factoid')),
            ],
            options={
                'verbose_name_plural': 'Factoid Possession',
            },
            bases=('pomsapp.factoid',),
        ),
        migrations.CreateModel(
            name='FactReference',
            fields=[
                ('factoid_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Factoid')),
            ],
            options={
                'verbose_name_plural': 'Factoid Reference',
            },
            bases=('pomsapp.factoid',),
        ),
        migrations.CreateModel(
            name='FactRelationship',
            fields=[
                ('factoid_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Factoid')),
            ],
            options={
                'verbose_name_plural': 'Factoid Relationship',
            },
            bases=('pomsapp.factoid',),
        ),
        migrations.CreateModel(
            name='FactTitle',
            fields=[
                ('factoid_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Factoid')),
                ('bygraceofgod', models.BooleanField(default=False, verbose_name='by grace of God')),
                ('byanotherdivineinvocation', models.BooleanField(default=False, verbose_name='by another divine invocation')),
                ('titletypekey', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.TitleType', verbose_name='title type')),
            ],
            options={
                'verbose_name_plural': 'Factoid Title/Occupation',
            },
            bases=('pomsapp.factoid',),
        ),
        migrations.CreateModel(
            name='FactTransaction',
            fields=[
                ('factoid_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Factoid')),
                ('isprimary', models.BooleanField(default=False, verbose_name='Primary')),
                ('isdare', models.BooleanField(default=False, verbose_name='Dare?')),
                ('isexchange', models.BooleanField(default=False, verbose_name='Exchange')),
                ('verbsnotspecified', models.BooleanField(default=False, verbose_name='verbs not specified?')),
                ('conveth', models.BooleanField(default=False, verbose_name='Conveth?')),
                ('genericwitnesses', models.BooleanField(default=False, verbose_name='Witnesses in original, but not copied into cartulary')),
                ('testemeipso', models.BooleanField(default=False, verbose_name='teste me ipso')),
                ('tenendasclauseolang', models.TextField(blank=True, verbose_name='tenendas orig. languag')),
                ('exemptionclauseolang', models.TextField(blank=True, verbose_name='exemptions orig. languag')),
                ('previouschartermention', models.BooleanField(default=False, verbose_name='previous mention of charter')),
                ('previouschirographmention', models.BooleanField(default=False, verbose_name='previous mention of chirograph')),
                ('perambulation', models.BooleanField(default=False, verbose_name='perambulation')),
                ('corroborationsealing', models.BooleanField(default=False, verbose_name='corroboration / sealing')),
                ('ismalediction', models.BooleanField(default=False, verbose_name='malediction?')),
                ('bothaddressorsmentioned', models.BooleanField(default=False, verbose_name='both addressors mentioned')),
                ('warrandice', models.BooleanField(default=False, verbose_name='warrandice')),
                ('commonburdens', models.ManyToManyField(blank=True, to='pomsapp.CommonBurdens', verbose_name='common burdens')),
                ('exemptions', models.ManyToManyField(blank=True, to='pomsapp.Exemptiontype', verbose_name='exemptions')),
                ('helper_tickboxes', models.ManyToManyField(blank=True, help_text='Helper field used for the faceted search - see actionsmodels', null=True, to='pomsapp.TransTickboxes', verbose_name='normalization of tickboxes')),
                ('legalpertinents', models.ManyToManyField(blank=True, to='pomsapp.LegalPertinents', verbose_name='additional legal pertinents')),
                ('renderdates', models.ManyToManyField(blank=True, to='pomsapp.Renderdate', verbose_name='render dates')),
                ('rendernominal', models.ManyToManyField(blank=True, to='pomsapp.Nominalrendertype', verbose_name='nominal renders')),
                ('returnsmilitary', models.ManyToManyField(blank=True, to='pomsapp.Returns_military', verbose_name='returns / military')),
                ('returnsrenders', models.ManyToManyField(blank=True, to='pomsapp.Returns_renders', verbose_name='returns / renders')),
                ('sicutclauses', models.ManyToManyField(blank=True, to='pomsapp.Sicutclausetype', verbose_name='sicut clause or equivalent')),
                ('spiritualbenefits', models.ManyToManyField(blank=True, to='pomsapp.Proanimagenerictypes', verbose_name='Generics')),
                ('tenendas', models.ManyToManyField(blank=True, to='pomsapp.Tenendasclauseoptions', verbose_name='tenendas')),
                ('transactiontype', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Transactiontype', verbose_name='type of transaction')),
            ],
            options={
                'verbose_name_plural': 'Factoid Transaction',
            },
            bases=('pomsapp.factoid',),
        ),
        migrations.CreateModel(
            name='Matrix',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Source')),
                ('identifier', models.CharField(max_length=100, verbose_name='identifier')),
                ('image_desc', models.TextField(blank=True, null=True, verbose_name='image description (obverse)')),
                ('image_desc_rev', models.TextField(blank=True, null=True, verbose_name='image description (reverse)')),
                ('legend_obv', models.TextField(blank=True, null=True, verbose_name='legend (obverse)')),
                ('legend_rev', models.TextField(blank=True, null=True, verbose_name='legend (reverse)')),
                ('catalogue', models.CharField(blank=True, max_length=300, null=True, verbose_name='catalogue')),
            ],
            options={
                'verbose_name_plural': 'Matrixes',
            },
            bases=('pomsapp.source',),
        ),
        migrations.CreateModel(
            name='Poss_Alms',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Alms')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Alms',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_General',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_General')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Possession general',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Lands',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Lands')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Lands',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Objects',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Objects')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Objects',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Office',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Office')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Office',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Revenues_kind',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Revenues_kind')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Revenues in kind',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Revenues_silver',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Revenues_silver')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Revenues in silver',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Poss_Unfree_persons',
            fields=[
                ('possessionnew_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.PossessionNew')),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='pomsapp.Poss_Unfree_persons')),
            ],
            options={
                'ordering': ['tree_id', 'lft'],
                'verbose_name_plural': 'Unfree persons',
            },
            bases=('pomsapp.possessionnew', models.Model),
        ),
        migrations.CreateModel(
            name='Seal',
            fields=[
                ('source_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='pomsapp.Source')),
                ('countersealed', models.BooleanField(default=False, verbose_name='countersealed?')),
                ('archive', models.CharField(blank=True, max_length=200, null=True, verbose_name='archive')),
                ('archiverefnumber', models.CharField(blank=True, max_length=100, null=True, verbose_name='archive ref number')),
                ('conditionnote', models.TextField(blank=True, null=True, verbose_name='condition note')),
                ('scranlink', models.URLField(blank=True, null=True, verbose_name='Link to Scran.ac.uk')),
                ('att_type_surv', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='surv_attach_of', to='pomsapp.AttachmentType', verbose_name='Attachment type')),
                ('charter_field', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Charter', verbose_name='charter')),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.SealColor', verbose_name='seal color')),
                ('matrix_field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Matrix', verbose_name='matrix')),
            ],
            options={
                'verbose_name_plural': 'Seals',
            },
            bases=('pomsapp.source',),
        ),
        migrations.AddField(
            model_name='source',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_source', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='source',
            name='grantor_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.GrantorCategory', verbose_name='grantor category'),
        ),
        migrations.AddField(
            model_name='source',
            name='language',
            field=models.ForeignKey(blank=True, default=1, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Language', verbose_name='language'),
        ),
        migrations.AddField(
            model_name='source',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_source', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='possessionnew',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_possessionnew', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='possessionnew',
            name='place',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='related place'),
        ),
        migrations.AddField(
            model_name='possessionnew',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_possessionnew', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='place',
            name='place_types',
            field=models.ManyToManyField(blank=True, null=True, to='pomsapp.PlaceType'),
        ),
        migrations.AddField(
            model_name='place',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_place', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='person',
            name='helper_places',
            field=models.ManyToManyField(related_name='helper_persons', to='pomsapp.Place', verbose_name='helper M2M table used to speed up searched in FB, from all persons to all places'),
        ),
        migrations.AddField(
            model_name='person',
            name='medievalgaelicforename',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.MedievalGaelicForename', verbose_name='medieval gaelic forename'),
        ),
        migrations.AddField(
            model_name='person',
            name='moderngaelicforename',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.ModernGaelicForename', verbose_name='modern gaelic forename'),
        ),
        migrations.AddField(
            model_name='person',
            name='relatedplace',
            field=models.ForeignKey(blank=True, help_text='Experimental Feature: this value has been extracted from the place/institutional field below', null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='Related place [reference extracted from place-institutional]'),
        ),
        migrations.AddField(
            model_name='person',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_person', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='factoid',
            name='created_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_factoid', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='factoid',
            name='helper_people',
            field=models.ManyToManyField(db_index=True, related_name='helperfactoids', through='pomsapp.AssocHelperPerson', to='pomsapp.Person', verbose_name='associated people - helper field'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='helper_places',
            field=models.ManyToManyField(related_name='helper_factoids', to='pomsapp.Place', verbose_name='helper M2M table used to speed up searched in FB, from all factoids to all places (bypassing the possessions)'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='people',
            field=models.ManyToManyField(related_name='factoids', through='pomsapp.AssocFactoidPerson', to='pomsapp.Person', verbose_name='associated people'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_privileges',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPrivileges', to='pomsapp.Privileges', verbose_name='privileges'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='proanimapeople',
            field=models.ManyToManyField(related_name='factoidsproanima', through='pomsapp.AssocFactoidProanima', to='pomsapp.Person', verbose_name='pro anima people'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='sourcekey',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Source', verbose_name='Document'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='updated_by',
            field=models.ForeignKey(blank=True, help_text='No need to edit: automatically set when saving', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updated_factoid', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='factoid',
            name='witnesses',
            field=models.ManyToManyField(related_name='factoidswitness', through='pomsapp.AssocFactoidWitness', to='pomsapp.Person', verbose_name='witnesses'),
        ),
        migrations.AddField(
            model_name='assochelperperson',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assochelperperson',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Person'),
        ),
        migrations.AddField(
            model_name='assochelperperson',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Role', verbose_name='role'),
        ),
        migrations.AddField(
            model_name='assocfactoidwitness',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidwitness',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Person'),
        ),
        migrations.AddField(
            model_name='assocfactoidwitness',
            name='role',
            field=models.ForeignKey(blank=True, default=4, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Role', verbose_name='role'),
        ),
        migrations.AddField(
            model_name='assocfactoidproanima',
            name='factoidtrans',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidproanima',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Person'),
        ),
        migrations.AddField(
            model_name='assocfactoidproanima',
            name='role',
            field=models.ForeignKey(blank=True, default=14, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Role', verbose_name='role'),
        ),
        migrations.AddField(
            model_name='assocfactoidprivileges',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidprivileges',
            name='privilege',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Privileges', verbose_name='privileges'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_unfreep',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_revenuesilver',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_revenuekind',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_pgeneral',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_office',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_objects',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_lands',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_alms',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidperson',
            name='factoid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Factoid'),
        ),
        migrations.AddField(
            model_name='assocfactoidperson',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Person'),
        ),
        migrations.AddField(
            model_name='assocfactoidperson',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Role', verbose_name='role'),
        ),
        migrations.CreateModel(
            name='GenderNoInstitution',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('pomsapp.gender',),
        ),
        migrations.CreateModel(
            name='Institution',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('pomsapp.person',),
        ),
        migrations.CreateModel(
            name='PersonNoInstitutions',
            fields=[
            ],
            options={
                'indexes': [],
                'proxy': True,
            },
            bases=('pomsapp.person',),
        ),
        migrations.AddField(
            model_name='matrix',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Person', verbose_name='Owner'),
        ),
        migrations.AddField(
            model_name='matrix',
            name='shape',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.MatrixShape', verbose_name='matrix shape'),
        ),
        migrations.AddField(
            model_name='factrelationship',
            name='placefielty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='related place (for fealty relationships)'),
        ),
        migrations.AddField(
            model_name='factrelationship',
            name='relationship',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Relationshiptype', verbose_name='relationship'),
        ),
        migrations.AddField(
            model_name='factreference',
            name='placefielty',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='related place (for fielty relationships)'),
        ),
        migrations.AddField(
            model_name='factreference',
            name='reference',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Referencetype', verbose_name='reference'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_alms',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_alms', to='pomsapp.Poss_Alms', verbose_name='alms'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_lands',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_lands', to='pomsapp.Poss_Lands', verbose_name='lands'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_objects',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_objects', to='pomsapp.Poss_Objects', verbose_name='objects'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_office',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_office', to='pomsapp.Poss_Office', verbose_name='office'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_pgeneral',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_pgeneral', to='pomsapp.Poss_General', verbose_name='possessions in general'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_revkind',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_revenuekind', to='pomsapp.Poss_Revenues_kind', verbose_name='revenue in kind'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_revsilver',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_revenuesilver', to='pomsapp.Poss_Revenues_silver', verbose_name='revenue in silver'),
        ),
        migrations.AddField(
            model_name='factoid',
            name='poss_unfreep',
            field=models.ManyToManyField(through='pomsapp.AssocFactoidPoss_unfreep', to='pomsapp.Poss_Unfree_persons', verbose_name='unfree persons'),
        ),
        migrations.AddField(
            model_name='charter',
            name='placefk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Place', verbose_name='Place'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_unfreep',
            name='poss_unfree_persons',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Unfree_persons', verbose_name='unfree persons'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_revenuesilver',
            name='poss_revsilver',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Revenues_silver', verbose_name='revenues in silver'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_revenuekind',
            name='poss_revkind',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Revenues_kind', verbose_name='revenues in kind'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_pgeneral',
            name='poss_pgeneral',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_General', verbose_name='possessions in general'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_office',
            name='poss_office',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Office', verbose_name='office'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_objects',
            name='poss_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Objects', verbose_name='objects'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_lands',
            name='poss_land',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Lands', verbose_name='lands'),
        ),
        migrations.AddField(
            model_name='assocfactoidposs_alms',
            name='poss_alms',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pomsapp.Poss_Alms', verbose_name='alms'),
        ),
    ]
