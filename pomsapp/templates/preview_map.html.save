
{% load extrafilters %}
	
	{% block contents %}
		
		<div id="map" style="width:100%;height:300px;">
								
		</div>


	<script>



	
	
	markerStyles = {'transaction':'blue','possession':'red','title/occupation':'red','other':'yellow'}

	L.newCircleMarker = L.CircleMarker.extend({
		setZIndexOffset: function (offset) {
			this.options.zIndexOffset = offset;
			this.update();
			return this;
		},
		update: function () {
			if (this._icon) {
				var pos = this._map.latLngToLayerPoint(this._latlng).round();
				this._setPos(pos);
			}
		return this;
		}
	});


	$('#map').ready(function(){
		map = new L.map('map',{center: [51.505, -0.09],zoom: 13});	
                layer = new L.TileLayer('http://{s}.tiles.mapbox.com/v3/isawnyu.map-knmctlkh/{z}/{x}/{y}.png',
		        {attribution:'Map base by <a href="http://awmc.unc.edu/">AWMC</a>'}).addTo(map);

		oms = new OverlappingMarkerSpiderfier(map,{keepSpiderfied:true});
		
		for (r in geoArray){
			for (p in geoArray[r].places){

				var m = new L.newCircleMarker( 
						[ parseFloat(geoArray[r].places[p].coordinates.split(',')[0]),
						  parseFloat(geoArray[r].places[p].coordinates.split(',')[1])]
						,{	fillColor: markerStyles[geoArray[r].type]  ,
							radius:5,
							fillOpacity:0.7,
							color:markerStyles[geoArray[r].type]  ,
							'name':geoArray[r].places[p].name,
							'type':geoArray[r].type,
							'factoid_id':geoArray[r].factoid_id
						});
				m.bindPopup(
				'<table class="simple headersX"><tbody>' +
				'<tr><th colspan="2">'+ m.options.name +'</th></tr>' +
                                '<tr><th colspan="2">' + geoArray[r].type + '</th></tr>' +
				'<tr><th colspan="2">' + geoArray[r].source + '</th></tr>' +
				'<tr><th colspan="2">' + geoArray[r].desc + '</th></tr>' +				
				'<tr><th>Name</th><th>Role</th></tr>'
				+ getPeopleRows(geoArray[r].people) + 
				'</tbody></table>'
				);

				
				map.addLayer(m);
				oms.addMarker(m);


                                if (r==0){
					minX = m.getLatLng().lng;
					minY = m.getLatLng().lat;
					maxX = m.getLatLng().lng;
					maxY = m.getLatLng().lat;
                                };
				
				if (m.getLatLng().lng <=  minX ){
					minX = m.getLatLng().lng;
				}
				else {
					maxX = m.getLatLng().lng;
				}

                                if (m.getLatLng().lat <=  minY ){
                                        minY = m.getLatLng().lat;
                                }
                                else {
                                        maxY = m.getLatLng().lat;
                                }


			}
		};

		var ll = new L.LatLng(minY,minX);
                var ur = new L.LatLng(maxY,maxX);
		var b = new L.LatLngBounds(ll,ur);
		map.fitBounds(b);

	});
	
	function getPeopleRows(peeps){
		var str = "";
		for (p in peeps){
			str += '<tr><td>'+ peeps[p].name +'</td><td>'+ peeps[p].role + '</td></tr>'
		}
		return str;
	};

	</script>


	{% endblock %}
	
	
